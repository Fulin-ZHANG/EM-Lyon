arrange(desc(Avg_Cap))
data %>%
mutate(Year = year(Date)) %>%
group_by(Tick, Year) %>%
summarise(Avg_Cap = mean(Mkt_Cap)) %>%
filter(Year == 2015) %>%
arrange(desc(Avg_Cap))
data %>%
mutate(Year = year(Date)) %>%
group_by(Tick, Year) %>%
summarise(Avg_Cap = mean(Mkt_Cap)) %>%
filter(Year == 2015) %>%
arrange(desc(Avg_Cap))
data %>%
group_by(Tick) |>
summarise(avg_cap = mean(capabilities),
avg_p2b = mean(P2B, na.rm = T),
avg_ret = mean(Return, na.rm = T)) %>%
ggplot(aes(y=render(Tick, avg_cap), x = avg_cap, fill = avg_cap)) +
geom_col(alpha = .7) +
scale_fill_viridis_c(direction = 1) + theme_classic() +
theme(legend.position = "none") + ylab("") + xlab("Average market capitalization")
dplyr::last_dplyr_warnings()
data %>%
group_by(Tick) |>
summarise(avg_cap = mean(capabilities),
avg_p2b = mean(P2B, na.rm = T),
avg_ret = mean(Return, na.rm = T)) %>%
ggplot(aes(y=render(Tick, avg_cap), x = avg_cap, fill = avg_cap)) +
geom_col(alpha = .7) +
scale_fill_viridis_c(direction = 1) + theme_classic() +
theme(legend.position = "none") + ylab("") + xlab("Average market capitalization")
data %>%
group_by(Tick) |>
summarise(avg_cap = mean(Mkt_Cap),
avg_p2b = mean(P2B, na.rm = T),
avg_ret = mean(Return, na.rm = T)) %>%
ggplot(aes(y=render(Tick, avg_cap), x = avg_cap, fill = avg_cap)) +
geom_col(alpha = .7) +
scale_fill_viridis_c(direction = 1) + theme_classic() +
theme(legend.position = "none") + ylab("") + xlab("Average market capitalization")
data %>%
group_by(Tick) |>
summarise(avg_cap = mean(Mkt_Cap),
avg_p2b = mean(P2B, na.rm = T),
avg_ret = mean(Return, na.rm = T)) %>%
ggplot(aes(y=render(Tick, avg_cap), x = avg_cap, fill = avg_cap)) +
geom_col(alpha = .7) +
scale_fill_viridis_c(direction = 1) + theme_classic() +
theme(legend.position = "none") + ylab("") + xlab("Average market capitalization")
data %>%
group_by(Tick) |>
summarise(avg_cap = mean(Mkt_Cap),
avg_p2b = mean(P2B, na.rm = T),
avg_ret = mean(Return, na.rm = T)) %>%
ggplot(aes(y=reorder(Tick, avg_cap), x = avg_cap, fill = avg_cap)) +
geom_col(alpha = .7) +
scale_fill_viridis_c(direction = 1) + theme_classic() +
theme(legend.position = "none") + ylab("") + xlab("Average market capitalization")
data |>
select(Date, Tick, Return) %>%
pivot_wider(names_from = Tick, values_from = Return) |>
select(-Date) %>%
na.omit()
load("~/Documents/GitHub/EMLyon_DSAIS/Finace&DSR/project/Data/transactions.RData")
load("~/Documents/GitHub/EMLyon_DSAIS/Finace&DSR/project/Data/transactions.RData")
# Fraud Detection
```{r}
view(transactions)
getwd()
load("/Data/transactions.RData")
load("./Data/transactions.RData")
view(transactions)
View(transactions)
summary(transactions)
load("./Data/bankruptcy.RData")
View(bankruptcy)
View(VC_data)
load("./Data/VC_data.RData")
View(VC_data)
load("./Data/VC_data.RData")
View(VC_data)
VC <- load("./Data/VC_data.RData")
View(VC)
VC <- load("./Data/VC_data.RData", character.only = TRUE)
View(VC)
# load("./Data/transactions.RData")
# load("./Data/bankruptcy.RData")
load("./Data/VC_data.RData", character.only = TRUE)
# load("./Data/transactions.RData")
# load("./Data/bankruptcy.RData")
load("./Data/VC_data.RData")
View(VC)
load("~/Documents/GitHub/EMLyon_DSAIS/Finace&DSR/project/Data/VC_data.RData")
View(VC_data)
head(VC_data)
# load("./Data/transactions.RData")
# load("./Data/bankruptcy.RData")
VC <- load("./Data/VC_data.RData")
head(VC_data)
head(VC)
load("~/Documents/GitHub/EMLyon_DSAIS/Finace&DSR/project/Data/VC_data.RData")
head(VCdata)
View(VCdata)
library(tidyverse)
sd(x)
N <- 120
sigma <- 0.2
x <- rnorm(N, mean = 0, sd = sigma)
data.frame(t = 1:N, x = x) |>
ggplot(aes(x = t, y = x)) + geom_line() + theme_minimal()
mean(x)
sd(x)
set.seed(42) # This freezes the random number generator
x <- cumsum(rnorm(N, mean = 0, sd = sigma))
tibble(t = 1:N, x = x) |>
ggplot(aes(x = t, y = x)) + geom_line() + theme_minimal()
x_05 <- arima.sim(list(order = c(1,0,0), ar=.05), n = N)
x_95 <- arima.sim(list(order = c(1,0,0), ar=.95), n = N)
tibble(time = 1:N, x_05 = x_05, x_95 = x_95) |>
pivot_longer(-time, names_to = "process", values_to = "values") |>
ggplot(aes(x = time, y = values, color = process)) + geom_line() +
theme_bw() +
scale_color_manual(values = c("#DD9911", "#0066AA"))
library(forecast) # For the ggAcf() function
ggAcf(x_95) + theme_bw() +
geom_function(fun = function(x) exp(x*log(0.95)), color = "#11DD33")
library(quantmod)
library(highcharter)
min_date <- "1998-01-01"                 # Starting date
max_date <- "2024-03-27"                 # Ending date
getSymbols("^VIX", src = 'yahoo',        # The data comes from Yahoo Finance
from = min_date,              # Start date
to = max_date,                # End date
auto.assign = TRUE,
warnings = FALSE)
VIX <- VIX |> as.data.frame() |>
rownames_to_column("date") |>
mutate(date = as.Date(date))
head(VIX,7)                                   # Have a look at the result!
vix_chart <- VIX |> select(VIX.Close)
rownames(vix_chart) <- VIX |> pull(date)
highchart(type = "stock") %>%
hc_title(text = "Evolution of the VIX") %>%
hc_add_series(as.xts(vix_chart)) %>%
hc_tooltip(pointFormat = '{point.y:.3f}')
library(crypto2)
coins <- crypto_list()
c_info <- crypto_info(coin_list = coins, limit = 30)
library(plotly)
g <- coin_hist |>
ggplot(aes(x = date, y = close, color = name)) + geom_line() +
scale_y_log10() + theme_bw() + xlab("")
coin_symb <- c("BTC", "ETH", "USDT", "BNB", "USDC", "XRP")
coin_hist <- crypto_history(coins |> filter(symbol %in% coin_symb),
start_date = "20170101",
end_date = "20240325")
coin_hist <- coin_hist |>  # Timestamps are at midnight, hence we add a day.
mutate(date = 1 + as.Date(as.POSIXct(timestamp, origin="1970-01-01")))
library(plotly)
g <- coin_hist |>
ggplot(aes(x = date, y = close, color = name)) + geom_line() +
scale_y_log10() + theme_bw() + xlab("")
ggplotly(g)
coin_hist <- coin_hist |>
group_by(name) |>
mutate(return = close / lag(close) - 1 )
coin_hist |>
ggplot(aes(x = return, fill = name)) + geom_histogram() +
facet_wrap(vars(name), scales = "free") + theme_bw() +
theme(axis.title = element_blank())
crypto_acf <-
coin_hist |>
na.omit() %>%
split(.$name) %>%
map(~acf(.$return, plot = F)) %>%
map_dfr(
~data.frame(lag = .$lag,
acf = .$acf,
ci = qnorm(0.975)/sqrt(.$n.used)
), .id = "name")
crypto_acf |>
filter(lag > 0, lag < 6) |>
ggplot(aes(x = lag, y = acf, fill = name)) +
geom_col(position = "dodge") + theme_bw()
library(RcppRoll)
coin_hist <- coin_hist |>
group_by(name) |>
na.omit() |>
mutate(real_vol_20 = roll_sd(return, n = 20, fill = NA, na.rm = T))
coin_hist |>
filter(name == "Bitcoin") |>
pivot_longer(all_of(c("close", "real_vol_20")), names_to = "series", values_to = "value") |>
ggplot(aes(x = date, y = value, color = series)) + geom_line() + theme_bw() +
facet_wrap(vars(series), nrow = 2, scales = "free")# + scale_y_log10()
crypto_acf <- coin_hist |>
na.omit() %>%
split(.$name) %>%
map(~acf(.$real_vol_20, plot = F)) %>%
map_dfr(
~data.frame(lag = .$lag,
acf = .$acf,
ci = qnorm(0.975)/sqrt(.$n.used)
), .id = "name")
crypto_acf |>
filter(lag > 0, lag < 15) |>
ggplot(aes(x = lag, y = acf, fill = name)) +
geom_col(position = "dodge", alpha = 0.8) + theme_bw() +
scale_fill_viridis_d(option = "magma", end = 0.9, begin = 0.1)
library(rugarch)
library(fGarch)
garchFit(formula = ~garch(1,1),
data = coin_hist |>
filter(name == "Bitcoin") |>
pull(return))
spec <- ugarchspec()
ugarchfit(data = coin_hist |>
filter(name == "Bitcoin") |>
na.omit() |>
pull(return),
spec = spec)@fit$coef
library(fable)
library(tsibble)
library(feasts)
coin_hist |>
na.omit() |>
filter(symbol == "ETH") |>
tsibble(index = date) |>
model(
arima = ARIMA(return ~ 1 + pdq()),
snaive = SNAIVE(return)
) |>
forecast(h = 15) |>
autoplot() + theme_bw() + facet_grid(vars(.model))
coin_hist |>
na.omit() |>
filter(symbol == "ETH") |>
tsibble(index = date) |>
model(
arima = ARIMA(return ~ 1 + pdq()),
snaive = SNAIVE(return)
) |>
coef()
coin_hist |>
na.omit() |>
filter(symbol == "ETH") |>
tsibble(index = date) |>
model(
arima = ARIMA(return ~ 1 + pdq(1,0,1)),
snaive = SNAIVE(return)
) |>
coef()
coin_hist |>
na.omit() |>
filter(symbol == "ETH") |>
tsibble(index = date) |>
model(
arima = ARIMA(return ~ 1 + pdq(1,0,1)),
snaive = SNAIVE(return)
) |>
coef()
library(reticulate)
use_condaenv("r-tensorflow") # This is for M1 Macs with special conda environment
library(reticulate)
use_condaenv("r-tensorflow") # This is for M1 Macs with special conda environment
library(reticulate)
use_condaenv("r-tensorflow") # This is for M1 Macs with special conda environment
library(reticulate)
# use_condaenv("r-tensorflow") # This is for M1 Macs with special conda environment
library(TSLSTM)
data_coin <- coin_hist |>
select(timestamp, symbol, close, volume) |>
filter(symbol %in% c("BTC", "ETH")) |>
group_by(symbol) |>
mutate(date = as.Date(timestamp),
return = close / lag(close) - 1,
vol_change = volume / lag(volume) - 1) |>
ungroup() |>
select(date, symbol, return, vol_change) |>
pivot_wider(names_from = "symbol", values_from = c("return", "vol_change")) |>
mutate(return_ETH = lead(return_ETH)) |> # We forward the ETH return, as we want to predict it
na.omit()
train_coin <- data_coin |> filter(date < "2022-06-30")
test_coin <- data_coin |> filter(date > "2022-06-30")
library(keras)
model_rnn <- keras_model_sequential() %>%
layer_gru(units = 9,                                     # Nb units in hidden layer
batch_input_shape = c(1, nrow(train_coin), 3), # Dimensions = tricky part!
activation = 'tanh',                           # Activation function
return_sequences = TRUE) %>%                   # Return all the sequence
layer_dense(units = 1)                                   # Final aggregation layer
library(keras)
model_rnn <- keras_model_sequential() %>%
layer_gru(units = 9,                                     # Nb units in hidden layer
batch_input_shape = c(1, nrow(train_coin), 3), # Dimensions = tricky part!
activation = 'tanh',                           # Activation function
return_sequences = TRUE) %>%                   # Return all the sequence
layer_dense(units = 1)                                   # Final aggregation layer
install_keras()
model_rnn %>% compile(
loss = 'mean_squared_error',                             # Loss = quadratic
optimizer = optimizer_rmsprop(),                         # Backprop
metrics = c('mean_absolute_error')                       # Output metric MAE
)
library(keras)
install_keras()
model_rnn <- keras_model_sequential() %>%
layer_gru(units = 9,                                     # Nb units in hidden layer
batch_input_shape = c(1, nrow(train_coin), 3), # Dimensions = tricky part!
activation = 'tanh',                           # Activation function
return_sequences = TRUE) %>%                   # Return all the sequence
layer_dense(units = 1)                                   # Final aggregation layer
library(keras)
model_rnn <- keras_model_sequential() %>%
layer_gru(units = 9,                                     # Nb units in hidden layer
batch_input_shape = c(1, nrow(train_coin), 3), # Dimensions = tricky part!
activation = 'tanh',                           # Activation function
return_sequences = TRUE) %>%                   # Return all the sequence
layer_dense(units = 1)                                   # Final aggregation layer
# install.packages("tidyverse")
# install.packages(c("forecast", "quantmod", "crypto2", "RcppRoll", "rugarch", "fGarch"))
# install.package(c("fable", "tsibble", "feasts", "keras", "highcharter", "plotly"))
library(tidyverse)
N <- 120
sigma <- 0.2
x <- rnorm(N, mean = 0, sd = sigma)
data.frame(t = 1:N, x = x) |>
ggplot(aes(x = t, y = x)) + geom_line() + theme_minimal()
mean(x)
sd(x)
set.seed(42) # This freezes the random number generator
x <- cumsum(rnorm(N, mean = 0, sd = sigma))
tibble(t = 1:N, x = x) |>
ggplot(aes(x = t, y = x)) + geom_line() + theme_minimal()
x_05 <- arima.sim(list(order = c(1,0,0), ar=.05), n = N)
x_95 <- arima.sim(list(order = c(1,0,0), ar=.95), n = N)
tibble(time = 1:N, x_05 = x_05, x_95 = x_95) |>
pivot_longer(-time, names_to = "process", values_to = "values") |>
ggplot(aes(x = time, y = values, color = process)) + geom_line() +
theme_bw() +
scale_color_manual(values = c("#DD9911", "#0066AA"))
library(forecast) # For the ggAcf() function
ggAcf(x_95) + theme_bw() +
geom_function(fun = function(x) exp(x*log(0.95)), color = "#11DD33")
library(quantmod)
library(highcharter)
min_date <- "1998-01-01"                 # Starting date
max_date <- "2024-03-27"                 # Ending date
getSymbols("^VIX", src = 'yahoo',        # The data comes from Yahoo Finance
from = min_date,              # Start date
to = max_date,                # End date
auto.assign = TRUE,
warnings = FALSE)
VIX <- VIX |> as.data.frame() |>
rownames_to_column("date") |>
mutate(date = as.Date(date))
head(VIX,7)                                   # Have a look at the result!
vix_chart <- VIX |> select(VIX.Close)
rownames(vix_chart) <- VIX |> pull(date)
highchart(type = "stock") %>%
hc_title(text = "Evolution of the VIX") %>%
hc_add_series(as.xts(vix_chart)) %>%
hc_tooltip(pointFormat = '{point.y:.3f}')
library(crypto2)
coins <- crypto_list()
c_info <- crypto_info(coin_list = coins, limit = 30)
coin_symb <- c("BTC", "ETH", "USDT", "BNB", "USDC", "XRP")
coin_hist <- crypto_history(coins |> filter(symbol %in% coin_symb),
start_date = "20170101",
end_date = "20240325")
coin_hist <- coin_hist |>  # Timestamps are at midnight, hence we add a day.
mutate(date = 1 + as.Date(as.POSIXct(timestamp, origin="1970-01-01")))
library(plotly)
g <- coin_hist |>
ggplot(aes(x = date, y = close, color = name)) + geom_line() +
scale_y_log10() + theme_bw() + xlab("")
ggplotly(g)
coin_hist <- coin_hist |>
group_by(name) |>
mutate(return = close / lag(close) - 1 )
coin_hist |>
ggplot(aes(x = return, fill = name)) + geom_histogram() +
facet_wrap(vars(name), scales = "free") + theme_bw() +
theme(axis.title = element_blank())
crypto_acf <-
coin_hist |>
na.omit() %>%
split(.$name) %>%
map(~acf(.$return, plot = F)) %>%
map_dfr(
~data.frame(lag = .$lag,
acf = .$acf,
ci = qnorm(0.975)/sqrt(.$n.used)
), .id = "name")
crypto_acf |>
filter(lag > 0, lag < 6) |>
ggplot(aes(x = lag, y = acf, fill = name)) +
geom_col(position = "dodge") + theme_bw()
library(RcppRoll)
coin_hist <- coin_hist |>
group_by(name) |>
na.omit() |>
mutate(real_vol_20 = roll_sd(return, n = 20, fill = NA, na.rm = T))
coin_hist |>
filter(name == "Bitcoin") |>
pivot_longer(all_of(c("close", "real_vol_20")), names_to = "series", values_to = "value") |>
ggplot(aes(x = date, y = value, color = series)) + geom_line() + theme_bw() +
facet_wrap(vars(series), nrow = 2, scales = "free")# + scale_y_log10()
crypto_acf <- coin_hist |>
na.omit() %>%
split(.$name) %>%
map(~acf(.$real_vol_20, plot = F)) %>%
map_dfr(
~data.frame(lag = .$lag,
acf = .$acf,
ci = qnorm(0.975)/sqrt(.$n.used)
), .id = "name")
crypto_acf |>
filter(lag > 0, lag < 15) |>
ggplot(aes(x = lag, y = acf, fill = name)) +
geom_col(position = "dodge", alpha = 0.8) + theme_bw() +
scale_fill_viridis_d(option = "magma", end = 0.9, begin = 0.1)
library(rugarch)
library(fGarch)
garchFit(formula = ~garch(1,1),
data = coin_hist |>
filter(name == "Bitcoin") |>
pull(return))
spec <- ugarchspec()
ugarchfit(data = coin_hist |>
filter(name == "Bitcoin") |>
na.omit() |>
pull(return),
spec = spec)@fit$coef
library(fable)
library(tsibble)
library(feasts)
coin_hist |>
na.omit() |>
filter(symbol == "ETH") |>
tsibble(index = date) |>
model(
arima = ARIMA(return ~ 1 + pdq()),
snaive = SNAIVE(return)
) |>
forecast(h = 15) |>
autoplot() + theme_bw() + facet_grid(vars(.model))
coin_hist |>
na.omit() |>
filter(symbol == "ETH") |>
tsibble(index = date) |>
model(
arima = ARIMA(return ~ 1 + pdq()),
snaive = SNAIVE(return)
) |>
coef()
coin_hist |>
na.omit() |>
filter(symbol == "ETH") |>
tsibble(index = date) |>
model(
arima = ARIMA(return ~ 1 + pdq(1,0,1)),
snaive = SNAIVE(return)
) |>
coef()
library(reticulate)
# use_condaenv("r-tensorflow") # This is for M1 Macs with special conda environment
library(TSLSTM)
data_coin <- coin_hist |>
select(timestamp, symbol, close, volume) |>
filter(symbol %in% c("BTC", "ETH")) |>
group_by(symbol) |>
mutate(date = as.Date(timestamp),
return = close / lag(close) - 1,
vol_change = volume / lag(volume) - 1) |>
ungroup() |>
select(date, symbol, return, vol_change) |>
pivot_wider(names_from = "symbol", values_from = c("return", "vol_change")) |>
mutate(return_ETH = lead(return_ETH)) |> # We forward the ETH return, as we want to predict it
na.omit()
train_coin <- data_coin |> filter(date < "2022-06-30")
test_coin <- data_coin |> filter(date > "2022-06-30")
# install_keras()
model_rnn <- keras_model_sequential() %>%
layer_gru(units = 9,                                     # Nb units in hidden layer
batch_input_shape = c(1, nrow(train_coin), 3), # Dimensions = tricky part!
activation = 'tanh',                           # Activation function
return_sequences = TRUE) %>%                   # Return all the sequence
layer_dense(units = 1)                                   # Final aggregation layer
library(tensorflow)
install_tensorflow()
model_rnn <- keras_model_sequential() %>%
layer_gru(units = 9,                                     # Nb units in hidden layer
batch_input_shape = c(1, nrow(train_coin), 3), # Dimensions = tricky part!
activation = 'tanh',                           # Activation function
return_sequences = TRUE) %>%                   # Return all the sequence
layer_dense(units = 1)                                   # Final aggregation layer
library(tensorflow)
library(tensorflow)
model_rnn <- keras_model_sequential() %>%
layer_gru(units = 9,                                     # Nb units in hidden layer
batch_input_shape = c(1, nrow(train_coin), 3), # Dimensions = tricky part!
activation = 'tanh',                           # Activation function
return_sequences = TRUE) %>%                   # Return all the sequence
layer_dense(units = 1)                                   # Final aggregation layer
library(keras)
library(tensorflow)
model_rnn %>% compile(
loss = 'mean_squared_error',                             # Loss = quadratic
optimizer = optimizer_rmsprop(),                         # Backprop
metrics = c('mean_absolute_error')                       # Output metric MAE
)
