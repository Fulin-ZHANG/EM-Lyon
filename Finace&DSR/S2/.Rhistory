---
title: "Projet IF36"
---
title: "Projet IF36"
---
title: "Notebook example"
plot(cars) # Comment - bla bla bla
# And then write code in code chunks. This is a comment.
1+1
library(tidyverse)
filter(diamonds, carat > 3.5)
library(gapminder)
gapminder %>%
group_by(country) %>%
summarise(avg_pop = mean(pop),
avg_lifeexp = mean(lifeExp) %>% round(2)) %>%
arrange(desc(avg_pop)) %>%
head(10) %>%
ggplot(aes(x = avg_pop, y = reorder(country, avg_pop))) + geom_col() +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readr)
library(maps)
library(tidyverse)
library(plotrix)
library(rgl)
install.packages("rgl")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readr)
library(maps)
library(tidyverse)
library(plotrix)
library(rgl)
update.packages(ask = FALSE)
# chooseCRANmirror()
chooseCRANmirror(ind = 1)    # Set downloading location
install.packages("tidyverse") # Install (download) package: only once
library(tidyverse)            # Activate: each time you launch RStudio
1+1 # Test!
a <- 6 # This creates a variable but does not show it!
a      # If you want to see it, ask for it!
b <- 11:42  # This creates a variable but does not show it!
b           # If you want to see it, ask for it!
head(diamonds, 4) # The number gives the amount of rows shown
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readr)
library(maps)
library(tidyverse)
library(plotrix)
# library(rgl)
library(reshape2)
library(shiny)
install.packages("gapminder") # Install (download) package: only once
library(gapminder)            # Activate: each time you launch RStudio
head(gapminder,3)             # Have a look!
knit_with_parameters("~/Documents/GitHub/EMLyon_DSAIS/Finace&DSR/notebook_options.Rmd")
plot(cars) # Comment - bla bla bla
head(diamonds, 4) # The number gives the amount of rows shown
install.packages("gapminder") # Install (download) package: only once
install.packages("gapminder")
library(gapminder)            # Activate: each time you launch RStudio
head(gapminder,3)             # Have a look!
pivot_wider(gapminder[c(1:4,13:16,25:28), c(1,3,5)],  # Don't look at this code!
names_from = "country", values_from = "pop")
Year <- c(1970, 1990, 2010)
France <- c(52,59,65)
Germany <- c(61,80,82)
UK <- c(56,57,63)
not_tidy_pop <- data.frame(Year, France, Germany, UK)
not_tidy_pop
tidy_pop <- pivot_longer(not_tidy_pop,
cols = -Year,
names_to = "Country",
values_to = "Population")
tidy_pop[1:7,]  # First 7 lines (only) shown
filter(gapminder, lifeExp > 81.5) # Countries where people live long lives on average
filter(gapminder, country == "Japan", year > 2000)
select(gapminder[1:5,], country, year, pop)
head(arrange(gapminder, pop)) # Alternative: arrange(gapminder, desc(lifeExp)); desc() is for descending
head(mutate(gapminder, gdp = pop * gdpPercap))
filter(gapminder, country == "Japan", year > 2000)
head(arrange(gapminder, pop, desc(lifeExp)))
head(arrange(gapminder, desc(lifeExp)))
head(arrange(gapminder, desc(continent)))
head(mutate(gapminder, gdp = pop * gdpPercap))
select(filter(diamonds, carat > 4), carat, price, clarity) # BEURK!
diamonds %>%
filter(carat > 4) %>%
select(carat, price, clarity)  # So simple!
plot(cars) # Comment - bla bla bla
# And then write code in code chunks. This is a comment.
1+1
instaml
install.packages('tinytex')
tinytex::install_tinytex()
#| echo: true
300:50
c[4, 13, 9, 8]
c(4, 13, 9, 8)
#| echo: true
c(4, 13, 9, 8)
rep(("bu", "la"), 6)
rep(("bu","la"), 6)
rep(c("bu","la"), 6)
matrix(1:12, nrow = 3, ncol = 4, byrow = T)
matrix(1:12, nrow = 3, ncol = 4, byrow = T) # T or F, 打印顺序
matrix(1:12, nrow = 3, ncol = 4, byrow = F)
#| echo: false
matrix(1:12, nrow = 3, ncol = 4, byrow = T) # T or F, 打印顺序
matrix(1:12, nrow = 3, ncol = 4, byrow = F)
#| echo: false
matrix(1:12, nrow = 3, ncol = 4, byrow = T) # T or F, 打印顺序
matrix(1:12, nrow = 3, ncol = 4, byrow = F)
rep(c("bu","la"), 6)
#| echo: false
matrix(1:12, nrow = 3, ncol = 4, byrow = T) # T or F, 打印顺序
matrix(1:12, nrow = 3, ncol = 4, byrow = F)
matrix(1:12, nrow = 3, ncol = 4, byrow = T) # T or F, 打印顺序
matrix(1:12, nrow = 3, ncol = 4, byrow = F)
library(tidyverse)
library(tidyverse)
type <- rep(c("Shirt", "Trousers", "Skirt", "Underwear"), 3)   # This is a vector of text
size <- rep(c("Large", "Small", "Medium"), 4)                  # This is another vector of text
price <- c(15, 59, 35, 10, 17, 89, 48, 12, 10, 49, 29, 9)      # This is a vector of numbers
tibble(type, size, price)    # The "old" version: data.frame(type, size, price)
type <- rep(c("Shirt", "Trousers", "Skirt", "Underwear"), 3)   # This is a vector of text
size <- rep(c("Large", "Small", "Medium"), 4)                  # This is another vector of text
price <- c(15, 59, 35, 10, 17, 89, 48, 12, 10, 49, 29, 9)      # This is a vector of numbers
tibble(type, size, price)    # The "old" version: data.frame(type, size, price)
type <- rep(c("Shirt", "Trousers", "Skirt", "Underwear"), 3)   # This is a vector of text
size <- rep(c("Large", "Small", "Medium"), 4)                  # This is another vector of text
price <- c(15, 59, 35, 10, 17, 89, 48, 12, 10, 49, 29, 9)      # This is a vector of numbers
tibble(type, size, price)    # The "old" version: data.frame(type, size, price)
clothes$type
type <- rep(c("Shirt", "Trousers", "Skirt", "Underwear"), 3)   # This is a vector of text
size <- rep(c("Large", "Small", "Medium"), 4)                  # This is another vector of text
price <- c(15, 59, 35, 10, 17, 89, 48, 12, 10, 49, 29, 9)      # This is a vector of numbers
clothes <- tibble(type, size, price)    # The "old" version: data.frame(type, size, price)
clothes$type
clothes$type
columns(clothes) <- c("type", "size", "cost")
clothes$type
columns(clothes)[3] <- "Price"
clothes$type
columns(clothes)[3] <- "price"
clothes$type
Columns(clothes)[3] <- "price"
clothes$type
colnames(clothes)[3] <- "price"
library(tidyverse)
library(dplyr)
diamonds[c(10, 60:63, 9000), c(7, 1:4)]
diamonds[c(10, 60:63, 9000), c(7, 1:4)]
diamonds$cut == "Good"
gapminder %>%
filter(country == "France") # Which is much better, syntax-wise
library(gapminder)
gapminder %>%
filter(country == "France") # Which is much better, syntax-wise
gapminder %>%
filter(country == "France") # Which is much better, syntax-wise
gapminder %>%
filter(country == "France" && year == 1952) # Which is much better, syntax-wise
gapminder %>%
filter(country == "France" && year == "1952") # Which is much better, syntax-wise
gapminder %>%
filter(country == "France" & year == "1952") # Which is much better, syntax-wise
substr("$100", 2, 4) # substr(text, where_to_start, where_to_stop) SEE ALSO str_remove("$100", "\\$")
#| echo: false
300:50
nchar("blabla")
substr("$100", 2, 4) # substr(text, where_to_start, where_to_stop) SEE ALSO str_remove("$100", "\\$")
nchar("blabla")
gapminder %>%
mutate(country = country %>%
substr(2, nchar(as.character(country))-1))
as.character(1:6)                       # From number to text
as.character(1:6)                       # From number to text
as.numeric(c("4.1", "2", "13"))         # From text to number
str_replace_all(c("4,2", "5,6"), ",", ".") # Then pipe %>% as.numeric()
as.factor(c("small", "medium", "large", "large", "small"))     # From text to category
levels(diamonds$cut)
levels(gapminder$continent)   # List of values: UNORDERED => alphabetical layout
nlevels(gapminder$country)    # Number of categories in the data
clothes <- clothes %>%
mutate(size = as.factor(size))
# This is equivalent: clothes$size <- as.factor(clothes$size)
levels(clothes$size)   # Now a categorical variable!
install.packages("learnr")
clothes <- clothes %>%
mutate(size = size %>% recode_factor(Small = "Little",
Medium = "Medium",
Large = "Big",
.ordered = TRUE)
)
clothes$size   # Now an ordered categorical variable!
# 假设的数据框
population_data <- data.frame(
country = c("Country A", "Country B", "Country C"),
population = c(5000000, 70000000, 15000000)
)
# 使用mutate()添加新列
library(dplyr) # 确保已加载dplyr包
population_data <- population_data %>%
mutate(population_in_millions = population / 1000000)
# 查看修改后的数据框
print(population_data)
# 假设的数据框
population_data <- data.frame(
country = c("Country A", "Country B", "Country C"),
population = c(5000000, 70000000, 15000000)
)
# 使用mutate()添加新列
library(dplyr) # 确保已加载dplyr包
population_data <- population_data %>%
mutate(population_in_millions = population / 1000000)
# 查看修改后的数据框
print(population_data)
diamonds %>%
filter(cut == "Good" | cut == "Very Good") %>%
head(5)
diamonds %>%
filter(cut == "Good" | cut == "Very Good") %>%
head(5)
diamond %>%
filter(cut == "Ideal" & clarity == "IF") %>%
head(4)
diamonds %>%
filter(cut == "Good" | cut == "Very Good") %>%
head(5)
diamonds %>%
filter(cut == "Ideal" & clarity == "IF") %>%
head(4)
diamonds %>%
filter(cut == "Good" | cut == "Very Good") %>%
head(5)
diamonds %>%
filter(cut == "Ideal" & clarity == "IF") %>%
head(4)
gapminder %>%
filter(continent != "Asia") %>%
head(3) # NOT EQUAL, the role of !: NOT
table_1 <- tibble(brand = c("Porsche", "Volkswagen", "Tesla", "Ferrari"),
co2 = c("High", "Medium", "Low", "High"))
table_2 <- tibble(car = c("Tesla", "Porsche", "Volkswagen", "Bentley"),
country = c("US", "Germany", "Germany", "UK"))
table_1 %>% left_join(table_2, by = c("brand" = "car"))
as.Date("07--26//11", format = "%m--%d//%y", origin = "1970-01-01")
setwd("~/Documents/GitHub/EMLyon_DSAIS/Finace&DSR/S2")
library(readr)
movie_metadata <- read_csv("movie_metadata.csv")
View(movie_metadata)
library(readr)
movie_metadata <- read_csv("movie_metadata.csv")
View(movie_metadata)
diamonds %>%
group_by(cut) %>%
summarise(nb_diamonds = n()) # see also count()
library(tidyverse)                                    # Activates the tidyverse
movies <- read_csv("movie_metadata.csv")              # Loads the data
movies <- data.frame(movies)                          # (technical move)
movies <- as_tibble(movies)                           # Create a neat tibble
movies <- movies %>%                                # Start from the current variable
mutate(title = movie_title,                     # Rename title (add a new column)
director = director_name,                # Rename director field (add a ne column) ...
actor_1 = actor_1_name,
actor_2 = actor_2_name,
actor_3 = actor_3_name,
year = title_year,
rating = content_rating,
nb_voters = num_voted_users,
likes = cast_total_facebook_likes,
budget = round(budget / 10^3,1),           # Round the number of K$ of budget
earnings = round(gross / 10^3, 1)           # Round the number of K$ of profit
) %>%
filter(budget > 0.1,                          # Keep films with big enough budget..
earnings > 0.1) %>%                    # ... and big enough earnings!
mutate(director = as.factor(director),
actor_1 = as.factor(actor_1),
country = as.factor(country),
rating = as.factor(rating)) %>%
select(title, director, actor_1, actor_2, actor_3, year, color,
duration, language, country, rating,
nb_voters, likes, budget, earnings, imdb_score)
movies <- movies %>% na.omit()                        # Removes instances with missing points
save(movies, file = "movies.RData")
summary(movies)
load("~/Documents/GitHub/EMLyon_DSAIS/Finace&DSR/S2/movies.RData")
load("songs.RData")
load("songs.RData")
songs %>%
filter(popularity > 95)
songs %>%
filter(artist == "Kanye West")
songs %>%
filter(artist == "Kanye West" or "Eminen")
songs %>%
filter(artist == "Kanye West" or artist == "Eminen")
songs %>%
filter(artist %in% c("Kanye West", "Eminen"))
songs %>%
filter(artist %in% c("Kanye West", "Eminem", "Droke"))
songs %>%
filter(artist %in% c("Kanye West", "Eminem", "Drake"))
songs %>%
group_by(artist) %>%
summarise(nb_songs = n())
songs %>%
group_by(artist) %>%
summarise(avg_papularity = mean(popularity)) %>%
arrange(desc(avg_papularity))
songs %>%
group_by(artist) %>%
summarise(nb_songs = n()) %>%
arrange(desc(nb_songs))
songs %>%
group_by(artist) %>%
summarise(nbr_songs = n(), avg_pop = mean(popularity)) %>%
filter(nbr_songs > 10) %>%
arrange(desc(avg_pop))
load("movies_RData")
load("movies_RData")
load("movies.RData")
head(movies, 5)
load("movies.RData")
view(movies)
load("movies.RData")
head(movies, 5)
movies %>%
filter( imdb_score > 8.8)
movies %>%
filter(director %in% c("Tim Burton")
movies %>%
filter(director %in% c("Tim Burton"))
library(dplyr)
# Assuming 'data' is your data frame and 'director' is the column of interest
number_of_directors <- data %>%
summarise(n_distinct(director, na.rm = TRUE)) %>%
pull()
library(dplyr)
number_of_directors <- movies %>%
summarise(n_distinct(director, na.rm = TRUE)) %>%
pull()
print(number_of_directors)
number_of_directors <- movies %>%
summarise(n_distinct(director, na.rm = TRUE)) %>%
pull()
movies %>%
group_by(director) %>%
summarise(nbr_films = n()) %>%
arrange(desc(nbr_films))
movies %>%
group_by(director) %>%
summarise(avg_imdb_score = mean(imdb_score)) %>%
arrange(desc(avg_imdb_score))
movies %>%
group_by(director) %>%
summarise(nbr_films = n(), avg_imdb_score = mean(imdb_score)) %>%
filter(nbr_films>10)
movies %>%
group_by(director) %>%
summarise(nbr_films = n(), avg_imdb_score = mean(imdb_score)) %>%
filter(nbr_films>10) %>%
arrange(desc(avg_imdb_score))
movies %>%
mutate(a/b_ratio = earnings/budget_ratio)
movies %>%
mutate(a/b_ratio <- earnings/budget_ratio)
movies %>%
mutate(a/b_ratio <- earnings/budget)
movies %>%
mutate(a/b_ratio = earnings/budget)
movies %>%
mutate(ratio = earnings/budget)
movies %>%
mutate(ratio = earnings/budget) %>%
round(ratio, 3)
movies %>%
mutate(ratio = earnings/budget, round(ratio, 3))
movies %>%
mutate(ratio = earnings/budget, round(ratio, 3)) %>%
group_by(director) %>%
summarise(nbr_films = n(), avg_ratio = mean(rtio)) %>%
filter(nbr_films>10) %>%
arrange(desc(avg_ratio))
movies %>%
mutate(ratio = earnings/budget, round(ratio, 3)) %>%
group_by(director) %>%
summarise(nbr_films = n(), avg_ratio = mean(rtio)) %>%
filter(nbr_films>10) %>%
arrange(desc(avg_ratio))
movies %>%
mutate(ratio = round(earnings/budget, 3)) %>%
group_by(director) %>%
summarise(
nbr_films = n(),
avg_ratio = mean(ratio, na.rm = TRUE) # 注意空值
) %>%
filter(nbr_films > 10)
arrange(desc(avg_ratio))
movies %>%
mutate(ratio = round(earnings/budget, 3)) %>%
group_by(director) %>%
summarise(
nbr_films = n(),
avg_ratio = mean(ratio, na.rm = TRUE) # 注意空值
) %>%
filter(nbr_films > 10) %>%
arrange(desc(avg_ratio))
# movies %>%
#   group_by(director) %>%
#   summarise(nbr_films = n(), avg_ratio = mean(rtio)) %>%
#   filter(nbr_films>10) %>%
#   arrange(desc(avg_ratio))
movies %>%
mutate(ratio = round(earnings/budget, 3)) %>%
group_by(director) %>%
summarise(
nbr_films = n(),
avg_ratio = mean(ratio, na.rm = TRUE) # 注意空值
) %>%
filter(nbr_films > 10) %>%
arrange(desc(avg_ratio))
